//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.1434
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Plugin
{
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="StorageServerSoap", Namespace="http://gamespy.net/sake")]
    public partial class StorageServer : System.Web.Services.Protocols.SoapHttpClientProtocol
    {
        
        /// <remarks/>
        public StorageServer()
        {
            this.Url = "http://ut3pc.sake.gamespy.com/SakeStorageServer/StorageServer.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamespy.net/sake/CreateRecord", RequestNamespace="http://gamespy.net/sake", ResponseNamespace="http://gamespy.net/sake", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result CreateRecord(int gameid, string loginTicket, string tableid, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] RecordField[] values, out int recordid)
        {
            object[] results = this.Invoke("CreateRecord", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        values});
            recordid = ((int)(results[1]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateRecord(int gameid, string loginTicket, string tableid, RecordField[] values, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CreateRecord", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        values}, callback, asyncState);
        }
        
        /// <remarks/>
        public Result EndCreateRecord(System.IAsyncResult asyncResult, out int recordid)
        {
            object[] results = this.EndInvoke(asyncResult);
            recordid = ((int)(results[1]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamespy.net/sake/UpdateRecord", RequestNamespace="http://gamespy.net/sake", ResponseNamespace="http://gamespy.net/sake", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result UpdateRecord(int gameid, string loginTicket, string tableid, int recordid, [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] RecordField[] values)
        {
            object[] results = this.Invoke("UpdateRecord", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        recordid,
                        values});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateRecord(int gameid, string loginTicket, string tableid, int recordid, RecordField[] values, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateRecord", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        recordid,
                        values}, callback, asyncState);
        }
        
        /// <remarks/>
        public Result EndUpdateRecord(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamespy.net/sake/DeleteRecord", RequestNamespace="http://gamespy.net/sake", ResponseNamespace="http://gamespy.net/sake", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result DeleteRecord(int gameid, string loginTicket, string tableid, int recordid)
        {
            object[] results = this.Invoke("DeleteRecord", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        recordid});
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteRecord(int gameid, string loginTicket, string tableid, int recordid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteRecord", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        recordid}, callback, asyncState);
        }
        
        /// <remarks/>
        public Result EndDeleteRecord(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamespy.net/sake/SearchForRecords", RequestNamespace="http://gamespy.net/sake", ResponseNamespace="http://gamespy.net/sake", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result SearchForRecords(int gameid, string loginTicket, string tableid, string[] fields, string filter, string sort, int offset, int max, string targetfilter, int surrounding, int[] ownerids, bool cacheFlag, [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfRecordValue")] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)] out RecordValue[][] values)
        {
            object[] results = this.Invoke("SearchForRecords", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        fields,
                        filter,
                        sort,
                        offset,
                        max,
                        targetfilter,
                        surrounding,
                        ownerids,
                        cacheFlag});
            values = ((RecordValue[][])(results[1]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSearchForRecords(int gameid, string loginTicket, string tableid, string[] fields, string filter, string sort, int offset, int max, string targetfilter, int surrounding, int[] ownerids, bool cacheFlag, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SearchForRecords", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        fields,
                        filter,
                        sort,
                        offset,
                        max,
                        targetfilter,
                        surrounding,
                        ownerids,
                        cacheFlag}, callback, asyncState);
        }
        
        /// <remarks/>
        public Result EndSearchForRecords(System.IAsyncResult asyncResult, out RecordValue[][] values)
        {
            object[] results = this.EndInvoke(asyncResult);
            values = ((RecordValue[][])(results[1]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamespy.net/sake/GetMyRecords", RequestNamespace="http://gamespy.net/sake", ResponseNamespace="http://gamespy.net/sake", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result GetMyRecords(int gameid, string loginTicket, string tableid, string[] fields, [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfRecordValue")] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)] out RecordValue[][] values)
        {
            object[] results = this.Invoke("GetMyRecords", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        fields});
            values = ((RecordValue[][])(results[1]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMyRecords(int gameid, string loginTicket, string tableid, string[] fields, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetMyRecords", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        fields}, callback, asyncState);
        }
        
        /// <remarks/>
        public Result EndGetMyRecords(System.IAsyncResult asyncResult, out RecordValue[][] values)
        {
            object[] results = this.EndInvoke(asyncResult);
            values = ((RecordValue[][])(results[1]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamespy.net/sake/GetSpecificRecords", RequestNamespace="http://gamespy.net/sake", ResponseNamespace="http://gamespy.net/sake", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result GetSpecificRecords(int gameid, string loginTicket, string tableid, int[] recordids, string[] fields, [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfRecordValue")] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)] out RecordValue[][] values)
        {
            object[] results = this.Invoke("GetSpecificRecords", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        recordids,
                        fields});
            values = ((RecordValue[][])(results[1]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSpecificRecords(int gameid, string loginTicket, string tableid, int[] recordids, string[] fields, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSpecificRecords", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        recordids,
                        fields}, callback, asyncState);
        }
        
        /// <remarks/>
        public Result EndGetSpecificRecords(System.IAsyncResult asyncResult, out RecordValue[][] values)
        {
            object[] results = this.EndInvoke(asyncResult);
            values = ((RecordValue[][])(results[1]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamespy.net/sake/GetRandomRecords", RequestNamespace="http://gamespy.net/sake", ResponseNamespace="http://gamespy.net/sake", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result GetRandomRecords(int gameid, string loginTicket, string tableid, string[] fields, string filter, int max, [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfRecordValue")] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)] out RecordValue[][] values)
        {
            object[] results = this.Invoke("GetRandomRecords", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        fields,
                        filter,
                        max});
            values = ((RecordValue[][])(results[1]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRandomRecords(int gameid, string loginTicket, string tableid, string[] fields, string filter, int max, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetRandomRecords", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        fields,
                        filter,
                        max}, callback, asyncState);
        }
        
        /// <remarks/>
        public Result EndGetRandomRecords(System.IAsyncResult asyncResult, out RecordValue[][] values)
        {
            object[] results = this.EndInvoke(asyncResult);
            values = ((RecordValue[][])(results[1]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamespy.net/sake/GetRecordCount", RequestNamespace="http://gamespy.net/sake", ResponseNamespace="http://gamespy.net/sake", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result GetRecordCount(int gameid, string loginTicket, string tableid, string filter, bool cacheFlag, out int count)
        {
            object[] results = this.Invoke("GetRecordCount", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        filter,
                        cacheFlag});
            count = ((int)(results[1]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRecordCount(int gameid, string loginTicket, string tableid, string filter, bool cacheFlag, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetRecordCount", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        filter,
                        cacheFlag}, callback, asyncState);
        }
        
        /// <remarks/>
        public Result EndGetRecordCount(System.IAsyncResult asyncResult, out int count)
        {
            object[] results = this.EndInvoke(asyncResult);
            count = ((int)(results[1]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamespy.net/sake/RateRecord", RequestNamespace="http://gamespy.net/sake", ResponseNamespace="http://gamespy.net/sake", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result RateRecord(int gameid, string loginTicket, string tableid, int recordid, byte rating, out int numRatings, out float averageRating)
        {
            object[] results = this.Invoke("RateRecord", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        recordid,
                        rating});
            numRatings = ((int)(results[1]));
            averageRating = ((float)(results[2]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRateRecord(int gameid, string loginTicket, string tableid, int recordid, byte rating, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("RateRecord", new object[] {
                        gameid,
                        loginTicket,
                        tableid,
                        recordid,
                        rating}, callback, asyncState);
        }
        
        /// <remarks/>
        public Result EndRateRecord(System.IAsyncResult asyncResult, out int numRatings, out float averageRating)
        {
            object[] results = this.EndInvoke(asyncResult);
            numRatings = ((int)(results[1]));
            averageRating = ((float)(results[2]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://gamespy.net/sake/GetRecordLimit", RequestNamespace="http://gamespy.net/sake", ResponseNamespace="http://gamespy.net/sake", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Result GetRecordLimit(int gameid, string loginTicket, string tableid, out int limitPerOwner, out int numOwned)
        {
            object[] results = this.Invoke("GetRecordLimit", new object[] {
                        gameid,
                        loginTicket,
                        tableid});
            limitPerOwner = ((int)(results[1]));
            numOwned = ((int)(results[2]));
            return ((Result)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRecordLimit(int gameid, string loginTicket, string tableid, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetRecordLimit", new object[] {
                        gameid,
                        loginTicket,
                        tableid}, callback, asyncState);
        }
        
        /// <remarks/>
        public Result EndGetRecordLimit(System.IAsyncResult asyncResult, out int limitPerOwner, out int numOwned)
        {
            object[] results = this.EndInvoke(asyncResult);
            limitPerOwner = ((int)(results[1]));
            numOwned = ((int)(results[2]));
            return ((Result)(results[0]));
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public partial class RecordField
    {
        
        /// <remarks/>
        public string name;
        
        /// <remarks/>
        public RecordValue value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public partial class RecordValue
    {
        
        /// <remarks/>
        public ByteValue byteValue;
        
        /// <remarks/>
        public ShortValue shortValue;
        
        /// <remarks/>
        public IntValue intValue;
        
        /// <remarks/>
        public FloatValue floatValue;
        
        /// <remarks/>
        public AsciiStringValue asciiStringValue;
        
        /// <remarks/>
        public UnicodeStringValue unicodeStringValue;
        
        /// <remarks/>
        public BooleanValue booleanValue;
        
        /// <remarks/>
        public DateAndTimeValue dateAndTimeValue;
        
        /// <remarks/>
        public BinaryDataValue binaryDataValue;
        
        /// <remarks/>
        public Int64Value int64Value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public partial class ByteValue
    {
        
        /// <remarks/>
        public byte value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public partial class Int64Value
    {
        
        /// <remarks/>
        public long value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public partial class BinaryDataValue
    {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public partial class DateAndTimeValue
    {
        
        /// <remarks/>
        public System.DateTime value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public partial class BooleanValue
    {
        
        /// <remarks/>
        public bool value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public partial class UnicodeStringValue
    {
        
        /// <remarks/>
        public string value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public partial class AsciiStringValue
    {
        
        /// <remarks/>
        public string value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public partial class FloatValue
    {
        
        /// <remarks/>
        public float value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public partial class IntValue
    {
        
        /// <remarks/>
        public int value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public partial class ShortValue
    {
        
        /// <remarks/>
        public short value;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("SharpDevelop", "3.0.0.3437")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://gamespy.net/sake")]
    public enum Result
    {
        
        /// <remarks/>
        Success,
        
        /// <remarks/>
        DatabaseUnavailable,
        
        /// <remarks/>
        LoginTicketInvalid,
        
        /// <remarks/>
        LoginTicketExpired,
        
        /// <remarks/>
        TableNotFound,
        
        /// <remarks/>
        RecordNotFound,
        
        /// <remarks/>
        FieldNotFound,
        
        /// <remarks/>
        FieldTypeInvalid,
        
        /// <remarks/>
        NoPermission,
        
        /// <remarks/>
        RecordLimitReached,
        
        /// <remarks/>
        AlreadyRated,
        
        /// <remarks/>
        NotRateable,
        
        /// <remarks/>
        NotOwned,
        
        /// <remarks/>
        FilterInvalid,
        
        /// <remarks/>
        SortInvalid,
        
        /// <remarks/>
        TargetFilterInvalid,
    }
}
